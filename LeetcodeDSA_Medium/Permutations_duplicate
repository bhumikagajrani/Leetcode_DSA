class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        Helper(nums, new ArrayList<>(), ans, new boolean[nums.length]);
        return ans;
    }

    private void Helper(int nums[], List<Integer> list, List<List<Integer>> ans, boolean used[])
    {

        if(list.size()==nums.length)
        {
            ans.add(new ArrayList<>(list));
            return;
        }

        for(int i=0;i<nums.length;i++)
        {
            if(used[i] || (i>0 && nums[i]==nums[i-1] && !used[i-1]))
            {
                continue;
            }
            list.add(nums[i]);
            used[i]=true;
            Helper(nums,list,ans,used);
            used[i]=false;
            list.remove(list.size()-1);

        }


    }
}
